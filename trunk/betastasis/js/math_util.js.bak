
var bs = {};

// These functions are copyright of Mike Bostock and were taken from the
// Protovis library.

bs.identity = function(x) { return x; };
bs.index = function() { return this.index; };

/**
 * Given the specified array of arrays, concatenates the arrays into a single
 * array. If the individual arrays are explicitly known, an alternative to blend
 * is to use JavaScript's <tt>concat</tt> method directly. These two equivalent
 * expressions:<ul>
 *
 * <li><tt>bs.blend([[1, 2, 3], ["a", "b", "c"]])</tt>
 * <li><tt>[1, 2, 3].concat(["a", "b", "c"])</tt>
 *
 * </ul>return [1, 2, 3, "a", "b", "c"].
 *
 * @param {array[]} arrays an array of arrays.
 * @returns {array} an array containing all the elements of each array in
 * <tt>arrays</tt>.
 */
bs.blend = function(arrays) {
  return Array.prototype.concat.apply([], arrays);
};

/**
 * Concatenates the specified array with itself <i>n</i> times. For example,
 * <tt>bs.repeat([1, 2])</tt> returns [1, 2, 1, 2].
 *
 * @param {array} a an array.
 * @param {number} [n] the number of times to repeat; defaults to two.
 * @returns {array} an array that repeats the specified array.
 */
bs.repeat = function(array, n) {
  return bs.blend(bs.range(n).map(function() { return array; }));
};

/**
 * Returns the sum of the specified array. If the specified array is not an
 * array of numbers, an optional accessor function <tt>f</tt> can be specified
 * to map the elements to numbers. See {@link #normalize} for an example.
 * Accessor functions can refer to <tt>this.index</tt>.
 *
 * @param {array} array an array of objects, or numbers.
 * @param {function} [f] an optional accessor function.
 * @returns {number} the sum of the specified array.
 */
bs.sum = function(array, f) {
  var o = {};
  return array.reduce(f
      ? function(p, d, i) { o.index = i; return p + f.call(o, d); }
      : function(p, d) { return p + d; }, 0);
};

/**
 * Returns the maximum value of the specified array. If the specified array is
 * not an array of numbers, an optional accessor function <tt>f</tt> can be
 * specified to map the elements to numbers. See {@link #normalize} for an
 * example. Accessor functions can refer to <tt>this.index</tt>.
 *
 * @param {array} array an array of objects, or numbers.
 * @param {function} [f] an optional accessor function.
 * @returns {number} the maximum value of the specified array.
 */
bs.max = function(array, f) {
  return Math.max.apply(null, f ? array.map(f) : array);
};

/**
 * Returns the minimum value of the specified array of numbers. If the specified
 * array is not an array of numbers, an optional accessor function <tt>f</tt>
 * can be specified to map the elements to numbers. See {@link #normalize} for
 * an example. Accessor functions can refer to <tt>this.index</tt>.
 *
 * @param {array} array an array of objects, or numbers.
 * @param {function} [f] an optional accessor function.
 * @returns {number} the minimum value of the specified array.
 */
bs.min = function(array, f) {
  return Math.min.apply(null, f ? array.map(f) : array);
};

/**
 * Returns the arithmetic mean, or average, of the specified array. If the
 * specified array is not an array of numbers, an optional accessor function
 * <tt>f</tt> can be specified to map the elements to numbers. See
 * {@link #normalize} for an example. Accessor functions can refer to
 * <tt>this.index</tt>.
 *
 * @param {array} array an array of objects, or numbers.
 * @param {function} [f] an optional accessor function.
 * @returns {number} the mean of the specified array.
 */
bs.mean = function(array, f) {
  return bs.sum(array, f) / array.length;
};

/**
 * Returns the median of the specified array. If the specified array is not an
 * array of numbers, an optional accessor function <tt>f</tt> can be specified
 * to map the elements to numbers. See {@link #normalize} for an example.
 * Accessor functions can refer to <tt>this.index</tt>.
 *
 * @param {array} array an array of objects, or numbers.
 * @param {function} [f] an optional accessor function.
 * @returns {number} the median of the specified array.
 */
bs.median = function(array, f) {
  array = array.map(f).sort(bs.naturalOrder);
  if (array.length % 2) return array[Math.floor(array.length / 2)];
  var i = array.length / 2;
  return (array[i - 1] + array[i]) / 2;
};

/**
 * Returns the unweighted variance of the specified array. If the specified
 * array is not an array of numbers, an optional accessor function <tt>f</tt>
 * can be specified to map the elements to numbers. See {@link #normalize} for
 * an example. Accessor functions can refer to <tt>this.index</tt>.
 *
 * @param {array} array an array of objects, or numbers.
 * @param {function} [f] an optional accessor function.
 * @returns {number} the variance of the specified array.
 */
bs.variance = function(array, f) {
  if (array.length < 1) return NaN;
  if (array.length == 1) return 0;
  var mean = bs.mean(array, f), sum = 0, o = {};
  if (!f) f = bs.identity;
  for (var i = 0; i < array.length; i++) {
    o.index = i;
    var d = f.call(o, array[i]) - mean;
    sum += d * d;
  }
  return sum;
};

/**
 * Returns an unbiased estimation of the standard deviation of a population,
 * given the specified random sample. If the specified array is not an array of
 * numbers, an optional accessor function <tt>f</tt> can be specified to map the
 * elements to numbers. See {@link #normalize} for an example. Accessor
 * functions can refer to <tt>this.index</tt>.
 *
 * @param {array} array an array of objects, or numbers.
 * @param {function} [f] an optional accessor function.
 * @returns {number} the standard deviation of the specified array.
 */
bs.deviation = function(array, f) {
  return Math.sqrt(bs.variance(array, f) / (array.length - 1));
};

/**
 * Returns the logarithm with a given base value.
 *
 * @param {number} x the number for which to compute the logarithm.
 * @param {number} b the base of the logarithm.
 * @returns {number} the logarithm value.
 */
bs.log = function(x, b) {
  return Math.log(x) / Math.log(b);
};




/**
 * Returns the unique elements in the specified array, in the order they appear.
 * Note that since JavaScript maps only support string keys, <tt>array</tt> must
 * contain strings, or other values that naturally map to distinct string
 * values. Alternatively, an optional accessor function <tt>f</tt> can be
 * specified to compute the string key for the given element. Accessor functions
 * can refer to <tt>this.index</tt>.
 *
 * @param {array} array an array, usually of string keys.
 * @returns {array} the unique values.
 */
bs.uniq = function(array) {
  var map = {}, keys = [];
  array.forEach(function(x) {
    if (!(x in map)) map[x] = keys.push(x);
  });
  return keys;
};

bs.naturalOrder = function(a, b) {
  return (a < b) ? -1 : ((a > b) ? 1 : 0);
};
bs.reverseOrder = function(b, a) {
  return (a < b) ? -1 : ((a > b) ? 1 : 0);
};



bs.quartiles = function(p_array) {
    var array = p_array.slice(0);
    array.sort(function(a,b){return a - b});
    
    var median_idx;
    var median;
    
    var lower = [];
    var lq;

    var upper = [];
    var uq;
    
    if (array.length % 2 > 0) {	
		median_idx = Math.floor(array.length / 2);
		median = array[median_idx];

		lower = array.slice(0, median_idx);
		upper = array.slice(median_idx + 1);

		quartile_idx = Math.floor(median_idx / 2);
		lq = (lower[(quartile_idx - 1)] + lower[(quartile_idx)]) / 2;
		uq = (upper[(quartile_idx - 1)] + upper[(quartile_idx)]) / 2;
    } else {
		median_idx = array.length / 2;
		median = (array[median_idx - 1] + array[median_idx]) / 2;

		lower = array.slice(0, median_idx);
		upper = array.slice(median_idx);
		
		quartile_idx = Math.floor(median_idx / 2);
		lq = (lower[(quartile_idx - 1)] + lower[(quartile_idx)]) / 2;
		uq = (upper[(quartile_idx - 1)] + upper[(quartile_idx)]) / 2;
    }

    return { median: median, lq: lq, uq: uq };
};

/*
Math.magn_round = function(d, up) {
    var sign = 1;
    if (d < 0) {
	d = d * -1;
	sign = -1;
    }
    
    var magn = Math.pow(10, Math.floor(pv.log(d, 10)));
    var foo = d / magn;
    var rounded;
    
    if (up == false) {
	rounded = sign * magn*(Math.floor(foo));
    } else {
	rounded = magn*(Math.ceil(foo));
    }
    
    rounded = sign*rounded;
    return rounded;
};
*/

bs.cosh = function(x) {
    return 0.5 * (Math.exp(x) + Math.exp(-x));
}





bs.iterateSorted = function(obj, worker, sort) {
	var keys = [];
    for (var key in obj) {
        if (this.hasOwnProperty[key])
            keys.push(key);
    }
    keys.sort(sort);

    for (var i = 0; i < keys.length; i++) {
        worker(obj[key], i);
    }
}


