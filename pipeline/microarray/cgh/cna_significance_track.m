
% CNA_SIGNIFICANCE_TRACK    Calculate statistically significant CNA regions
%
%    CNA_SIGNIFICANCE_TRACK(SEGMENTS, PROBESETS, TRACK_FILE) constructs an IGV 
%    track TRACK_FILE containing information about how statistically signicantly
%    aberrated different genomic locations are. The significances are calculated
%    based on the segmented copy number data SEGMENTS generated from paired
%    aCGH samples, and the CGH probesets given in the argument PROBESETS.
%
%    The function calculates a statistical significance for each probed location
%    of the genome, based on how many test samples show copy number aberrations
%    at those loci, relative to the reference samples. Both the number of
%    aberrations and the strength of the aberrations are taken into account.
%    The significance value is calculated by comparing against a null
%    distribution generated by permuting genomic loci. The algorithm is heavily
%    influenced by the GISTIC algorithm by Beroukhim et al (2007).
%
%    The p-values for all genomic loci are visualized as an IGV track, so that
%    the track value at any point is given by ±log10(1 / p), where the sign
%    is positive for amplifications, and negative for deletions. Hence a track
%    value of -7.0 would indicate a P-value of 10^-7 for observing so many
%    deletions in that genomic locus by chance alone.

% Author: Matti Annala <matti.annala@tut.fi>

function significance = cna_significance_track(segments, cgh_probesets, ...
	track_file, varargin)

global organism;

if isempty(regexpi(track_file, '.+\.igv'))
	fprintf(1, ['WARNING: A significance track should have a .igv suffix ' ...
	            'for optimal visualization in IGV.\n']);
end

cna = cn_seg_expand(segments, cgh_probesets);
g_score = sum(cna, 2);

fprintf(1, 'Performing permutation tests to find significance thresholds...\n');

N = size(cna, 1);

ptest_num = 100;

pscores = zeros(N * ptest_num, 1);

progress = Progress;

for p = 1:ptest_num
	pscore = zeros(N, 1);
	for k = 1:size(cna, 2)
		pscore = pscore + cna(randperm(N), k);
	end
	pos = 1 + (p-1) * N;
	pscores(pos:pos+N-1) = pscore;
	
	progress.update(p / ptest_num);
end





fprintf(1, 'Calculating p-values...\n');

% We use a different normal approximation for the amplified and deleted
% chromosomal regions.
mu = nanmean(pscores);
N_up = sum(pscores >= mu);
N_down = sum(pscores < mu);
sigma_up = sqrt(1 / (N_up-1) * sum((pscores(pscores >= mu) - mu).^2));
sigma_down = sqrt(1 / (N_down-1) * sum((pscores(pscores < mu) -mu).^2));

p_val = zeros(size(g_score));
p_val(g_score >= mu) = normcdf(g_score(g_score >= mu), mu, sigma_up);
p_val(g_score < mu) = normcdf(g_score(g_score < mu), mu, sigma_down);

cna_sign = ((p_val >= 0.5) - 0.5) * 2;
p_val(p_val > 0.5) = 1 - p_val(p_val > 0.5);

logp = log10(1 ./ p_val) .* cna_sign;

too_high = (logp == Inf);
too_low = (logp == -Inf);

[~, idx] = max(logp .* ~too_high);
tail_ratio = normcdf(g_score(idx), mu, sigma_up) / ...
	normpdf(g_score(idx), mu, sigma_up);
logp(too_high) = log10(1 ./ ...
	(tail_ratio * normpdf(g_score(too_high), mu, sigma_up)));

[~, idx] = min(logp .* ~too_low);
tail_ratio = normcdf(g_score(idx), mu, sigma_up) / ...
	normpdf(g_score(idx), mu, sigma_up);
logp(too_low) = -log10(1 ./ ...
	(tail_ratio * normpdf(g_score(too_low), mu, sigma_up)));
	
logp(logp == Inf) = max(logp .* (logp ~= Inf));
logp(logp == -Inf) = min(logp .* (logp ~= -Inf));






fprintf(1, 'Writing copy number aberration p-values as an IGV track...\n');

fid = fopen(track_file, 'W');
fprintf(fid, ...
	'#track maxHeightPixels=500:400:300 graphType=bar viewLimits=-20:20\n');
fprintf(fid, 'Chromosome\tStart\tEnd\tFeature\tCNA_p\n');

% Find all probes that target the chromosome we're interested in.
for chr = 1:24
	idx = find(cgh_probesets.Chromosome == chr);
	N = length(idx);
	
	offsets = cgh_probesets.Offset(idx);
	chr_logp = logp(idx);
	
	borders = round(mean([offsets(1:N-1) offsets(2:N)], 2));
	for p = 2:N-1
		fprintf(fid, '%d\t%d\t%d\t-\t%f\n', chr, borders(p-1)+1, borders(p), ...
			chr_logp(p));
	end
end

fclose(fid);




significance = struct;
significance.Score = g_score;
significance.P = p_val;
significance.CNAType = cna_sign;

